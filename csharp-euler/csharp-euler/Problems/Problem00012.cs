/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace csharp_euler.Problems
{
	class Problem00012 : ISolveProblems 
	{
		public void Solve()
		{
			int firstTriangleNumberWith500Factors = 0;

			int currentTriangleIndex = 1;
			int currentTriangleNumber = 1;

			int mostFactors=0;

			do
			{
				currentTriangleIndex++;

				currentTriangleNumber += currentTriangleIndex;

				//Assumption. The first triangle with 500 factors cannot be any triangle number below 500
				
				//For a number to have 2 + 2 factors, that number must be divisible by two, causing .5*n to be
				//	the other factor

				//For a project to have 2 + 498 factors, that number must be divisible by 498, causing 1/498*n to
				// be a factor

				if (currentTriangleNumber > (250*251))
				{
					var numberOfFactors = Common.MathFunc.NumberOfFactors(currentTriangleNumber);

					//Console.WriteLine(currentTriangleNumber + " Factors: " + numberOfFactors);

					if (numberOfFactors > mostFactors)
					{ mostFactors = numberOfFactors; }

					if (numberOfFactors >= 500)
					{
						firstTriangleNumberWith500Factors = currentTriangleNumber;
					}
				}

				//if (currentTriangleNumber > 1000000)
					//break;

			} while (firstTriangleNumberWith500Factors == 0);

			Console.WriteLine(firstTriangleNumberWith500Factors + " <-First Most-> " + mostFactors);
		}

		//private int CalcTriangleNumber(int )
	}
}
